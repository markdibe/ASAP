{"version":3,"file":"angular-date-value-accessor.umd.js","sources":["../../../projects/date-value-accessor/src/lib/date-value-accessor.ts","../../../projects/date-value-accessor/src/lib/date-value-accessor.module.ts","../../../projects/date-value-accessor/src/lib/local-date-value-accessor.ts","../../../projects/date-value-accessor/src/lib/local-date-value-accessor.module.ts","../../../projects/date-value-accessor/src/public-api.ts","../../../projects/date-value-accessor/src/angular-date-value-accessor.ts"],"sourcesContent":["import { Directive, ElementRef, HostListener, Renderer2, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const DATE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DateValueAccessor),\n  multi: true\n};\n\n/**\n * The accessor for writing a value and listening to changes on a date input element\n *\n *  ### Example\n *  `<input type=\"date\" name=\"myBirthday\" ngModel useValueAsDate>`\n */\n@Directive({\n  // this selector changes the previous behavior silently and might break existing code\n  // selector: 'input[type=date][formControlName],input[type=date][formControl],input[type=date][ngModel]',\n\n  // this selector is an opt-in version\n  // tslint:disable-next-line: directive-selector\n  selector: '[useValueAsDate]',\n  providers: [DATE_VALUE_ACCESSOR]\n})\n// tslint:disable-next-line: directive-class-suffix\nexport class DateValueAccessor implements ControlValueAccessor {\n\n  @HostListener('input', ['$event.target.valueAsDate']) onChange = (_: any) => { };\n  @HostListener('blur', []) onTouched = () => { };\n\n  constructor(private renderer: Renderer2, private elementRef: ElementRef) { }\n\n  writeValue(value: Date): void {\n    if (!value) {\n      this.renderer.setProperty(this.elementRef.nativeElement, 'value', null);\n      return;\n    }\n    this.renderer.setProperty(this.elementRef.nativeElement, 'valueAsDate', value);\n  }\n\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn; }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { DateValueAccessor } from './date-value-accessor';\n\n@NgModule({\n  declarations: [DateValueAccessor],\n  exports: [DateValueAccessor]\n})\nexport class DateValueAccessorModule { }\n","import { Directive, ElementRef, HostListener, Renderer2, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const LOCAL_DATE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => LocalDateValueAccessor),\n  multi: true\n};\n\n/**\n * The accessor for writing a value and listening to changes on a date input element\n *\n *  ### Example\n *  `<input type=\"date\" name=\"myBirthday\" ngModel useValueAsLocalDate>`\n */\n@Directive({\n  selector: '[useValueAsLocalDate]',\n  providers: [LOCAL_DATE_VALUE_ACCESSOR]\n})\n// tslint:disable-next-line: directive-class-suffix\nexport class LocalDateValueAccessor implements ControlValueAccessor {\n\n  onChange: any = () => {};\n\n  @HostListener('input', ['$event.target.valueAsDate']) onInput = (date: Date) => {\n    let selectedDate: Date | null = null;\n    if (date) {\n      // Create LOCAL Date, time is set to 00:00 in LOCAL time\n      selectedDate = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());;\n    }\n    this.onChange(selectedDate);\n  }\n  @HostListener('blur', []) onTouched = () => { };\n\n  constructor(private renderer: Renderer2, private elementRef: ElementRef) { }\n\n  writeValue(date: Date): void {\n    // Create UTC Date, time is set to 00:00 in UTC time\n    const utcDate: Date = date ?\n      new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())) :\n      null;\n    this.renderer.setProperty(this.elementRef.nativeElement, 'valueAsDate', utcDate);\n  }\n\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn; }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n\n// Use Local Dates with html input type date\n// https://stackoverflow.com/questions/53032953/what-is-the-correct-way-to-set-and-get-htmlinputelement-valueasdate-using-local\n","import { NgModule } from '@angular/core';\nimport { LocalDateValueAccessor } from './local-date-value-accessor';\n@NgModule({\n  declarations: [LocalDateValueAccessor],\n  exports: [LocalDateValueAccessor]\n})\nexport class LocalDateValueAccessorModule { }\n","/*\n * Public API Surface of date-value-accessor\n */\n\nexport * from './lib/date-value-accessor';\nexport * from './lib/date-value-accessor.module';\nexport * from './lib/local-date-value-accessor';\nexport * from './lib/local-date-value-accessor.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["NG_VALUE_ACCESSOR","forwardRef","Directive","Renderer2","ElementRef","HostListener","NgModule"],"mappings":";;;;;;QAGa,mBAAmB,GAAQ;QACtC,OAAO,EAAEA,uBAAiB;QAC1B,WAAW,EAAEC,eAAU,CAAC,cAAM,OAAA,iBAAiB,GAAA,CAAC;QAChD,KAAK,EAAE,IAAI;MACX;IAEF;;;;;;IAeA;;QAME,2BAAoB,QAAmB,EAAU,UAAsB;YAAnD,aAAQ,GAAR,QAAQ,CAAW;YAAU,eAAU,GAAV,UAAU,CAAY;YAHjB,aAAQ,GAAG,UAAC,CAAM,KAAQ,CAAC;YACvD,cAAS,GAAG,eAAS,CAAC;SAE4B;QAE5E,sCAAU,GAAV,UAAW,KAAW;YACpB,IAAI,CAAC,KAAK,EAAE;gBACV,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;gBACxE,OAAO;aACR;YACD,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;SAChF;QAED,4CAAgB,GAAhB,UAAiB,EAAoB,IAAU,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,EAAE;QACpE,6CAAiB,GAAjB,UAAkB,EAAc,IAAU,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,EAAE;QAEhE,4CAAgB,GAAhB,UAAiB,UAAmB;YAClC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;SAClF;;;;gBA9BFC,cAAS,SAAC;;;;;oBAMT,QAAQ,EAAE,kBAAkB;oBAC5B,SAAS,EAAE,CAAC,mBAAmB,CAAC;iBACjC;;;gBAvB6CC,cAAS;gBAAnCC,eAAU;;;2BA2B3BC,iBAAY,SAAC,OAAO,EAAE,CAAC,2BAA2B,CAAC;4BACnDA,iBAAY,SAAC,MAAM,EAAE,EAAE;;;;QCrB1B;;;;;gBAJCC,aAAQ,SAAC;oBACR,YAAY,EAAE,CAAC,iBAAiB,CAAC;oBACjC,OAAO,EAAE,CAAC,iBAAiB,CAAC;iBAC7B;;;QCHY,yBAAyB,GAAQ;QAC5C,OAAO,EAAEN,uBAAiB;QAC1B,WAAW,EAAEC,eAAU,CAAC,cAAM,OAAA,sBAAsB,GAAA,CAAC;QACrD,KAAK,EAAE,IAAI;MACX;IAEF;;;;;;IAUA;;QAeE,gCAAoB,QAAmB,EAAU,UAAsB;YAAvE,iBAA4E;YAAxD,aAAQ,GAAR,QAAQ,CAAW;YAAU,eAAU,GAAV,UAAU,CAAY;YAZvE,aAAQ,GAAQ,eAAQ,CAAC;YAE6B,YAAO,GAAG,UAAC,IAAU;gBACzE,IAAI,YAAY,GAAgB,IAAI,CAAC;gBACrC,IAAI,IAAI,EAAE;;oBAER,YAAY,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;oBAAA,CAAC;iBACxF;gBACD,KAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;aAC7B,CAAA;YACyB,cAAS,GAAG,eAAS,CAAC;SAE4B;QAE5E,2CAAU,GAAV,UAAW,IAAU;;YAEnB,IAAM,OAAO,GAAS,IAAI;gBACxB,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;gBACvE,IAAI,CAAC;YACP,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;SAClF;QAED,iDAAgB,GAAhB,UAAiB,EAAoB,IAAU,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,EAAE;QACpE,kDAAiB,GAAjB,UAAkB,EAAc,IAAU,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,EAAE;QAEhE,iDAAgB,GAAhB,UAAiB,UAAmB;YAClC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;SAClF;;;;gBAlCFC,cAAS,SAAC;oBACT,QAAQ,EAAE,uBAAuB;oBACjC,SAAS,EAAE,CAAC,yBAAyB,CAAC;iBACvC;;;gBAlB6CC,cAAS;gBAAnCC,eAAU;;;0BAwB3BC,iBAAY,SAAC,OAAO,EAAE,CAAC,2BAA2B,CAAC;4BAQnDA,iBAAY,SAAC,MAAM,EAAE,EAAE;;IAoB1B;IACA;;;QC/CA;;;;;gBAJCC,aAAQ,SAAC;oBACR,YAAY,EAAE,CAAC,sBAAsB,CAAC;oBACtC,OAAO,EAAE,CAAC,sBAAsB,CAAC;iBAClC;;;ICLD;;;;ICAA;;;;;;;;;;;;;;;;;"}