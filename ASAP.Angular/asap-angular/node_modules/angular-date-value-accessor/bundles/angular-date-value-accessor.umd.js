(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('angular-date-value-accessor', ['exports', '@angular/core', '@angular/forms'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['angular-date-value-accessor'] = {}, global.ng.core, global.ng.forms));
}(this, (function (exports, core, forms) { 'use strict';

    var DATE_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return DateValueAccessor; }),
        multi: true
    };
    /**
     * The accessor for writing a value and listening to changes on a date input element
     *
     *  ### Example
     *  `<input type="date" name="myBirthday" ngModel useValueAsDate>`
     */
    // tslint:disable-next-line: directive-class-suffix
    var DateValueAccessor = /** @class */ (function () {
        function DateValueAccessor(renderer, elementRef) {
            this.renderer = renderer;
            this.elementRef = elementRef;
            this.onChange = function (_) { };
            this.onTouched = function () { };
        }
        DateValueAccessor.prototype.writeValue = function (value) {
            if (!value) {
                this.renderer.setProperty(this.elementRef.nativeElement, 'value', null);
                return;
            }
            this.renderer.setProperty(this.elementRef.nativeElement, 'valueAsDate', value);
        };
        DateValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
        DateValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        DateValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
        };
        return DateValueAccessor;
    }());
    DateValueAccessor.decorators = [
        { type: core.Directive, args: [{
                    // this selector changes the previous behavior silently and might break existing code
                    // selector: 'input[type=date][formControlName],input[type=date][formControl],input[type=date][ngModel]',
                    // this selector is an opt-in version
                    // tslint:disable-next-line: directive-selector
                    selector: '[useValueAsDate]',
                    providers: [DATE_VALUE_ACCESSOR]
                },] }
    ];
    DateValueAccessor.ctorParameters = function () { return [
        { type: core.Renderer2 },
        { type: core.ElementRef }
    ]; };
    DateValueAccessor.propDecorators = {
        onChange: [{ type: core.HostListener, args: ['input', ['$event.target.valueAsDate'],] }],
        onTouched: [{ type: core.HostListener, args: ['blur', [],] }]
    };

    var DateValueAccessorModule = /** @class */ (function () {
        function DateValueAccessorModule() {
        }
        return DateValueAccessorModule;
    }());
    DateValueAccessorModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [DateValueAccessor],
                    exports: [DateValueAccessor]
                },] }
    ];

    var LOCAL_DATE_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return LocalDateValueAccessor; }),
        multi: true
    };
    /**
     * The accessor for writing a value and listening to changes on a date input element
     *
     *  ### Example
     *  `<input type="date" name="myBirthday" ngModel useValueAsLocalDate>`
     */
    // tslint:disable-next-line: directive-class-suffix
    var LocalDateValueAccessor = /** @class */ (function () {
        function LocalDateValueAccessor(renderer, elementRef) {
            var _this = this;
            this.renderer = renderer;
            this.elementRef = elementRef;
            this.onChange = function () { };
            this.onInput = function (date) {
                var selectedDate = null;
                if (date) {
                    // Create LOCAL Date, time is set to 00:00 in LOCAL time
                    selectedDate = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
                    ;
                }
                _this.onChange(selectedDate);
            };
            this.onTouched = function () { };
        }
        LocalDateValueAccessor.prototype.writeValue = function (date) {
            // Create UTC Date, time is set to 00:00 in UTC time
            var utcDate = date ?
                new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())) :
                null;
            this.renderer.setProperty(this.elementRef.nativeElement, 'valueAsDate', utcDate);
        };
        LocalDateValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
        LocalDateValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        LocalDateValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
        };
        return LocalDateValueAccessor;
    }());
    LocalDateValueAccessor.decorators = [
        { type: core.Directive, args: [{
                    selector: '[useValueAsLocalDate]',
                    providers: [LOCAL_DATE_VALUE_ACCESSOR]
                },] }
    ];
    LocalDateValueAccessor.ctorParameters = function () { return [
        { type: core.Renderer2 },
        { type: core.ElementRef }
    ]; };
    LocalDateValueAccessor.propDecorators = {
        onInput: [{ type: core.HostListener, args: ['input', ['$event.target.valueAsDate'],] }],
        onTouched: [{ type: core.HostListener, args: ['blur', [],] }]
    };
    // Use Local Dates with html input type date
    // https://stackoverflow.com/questions/53032953/what-is-the-correct-way-to-set-and-get-htmlinputelement-valueasdate-using-local

    var LocalDateValueAccessorModule = /** @class */ (function () {
        function LocalDateValueAccessorModule() {
        }
        return LocalDateValueAccessorModule;
    }());
    LocalDateValueAccessorModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [LocalDateValueAccessor],
                    exports: [LocalDateValueAccessor]
                },] }
    ];

    /*
     * Public API Surface of date-value-accessor
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DATE_VALUE_ACCESSOR = DATE_VALUE_ACCESSOR;
    exports.DateValueAccessor = DateValueAccessor;
    exports.DateValueAccessorModule = DateValueAccessorModule;
    exports.LOCAL_DATE_VALUE_ACCESSOR = LOCAL_DATE_VALUE_ACCESSOR;
    exports.LocalDateValueAccessor = LocalDateValueAccessor;
    exports.LocalDateValueAccessorModule = LocalDateValueAccessorModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-date-value-accessor.umd.js.map
