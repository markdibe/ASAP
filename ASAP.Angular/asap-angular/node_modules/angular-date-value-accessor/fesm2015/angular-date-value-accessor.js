import { forwardRef, Directive, Renderer2, ElementRef, HostListener, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';

const DATE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => DateValueAccessor),
    multi: true
};
/**
 * The accessor for writing a value and listening to changes on a date input element
 *
 *  ### Example
 *  `<input type="date" name="myBirthday" ngModel useValueAsDate>`
 */
// tslint:disable-next-line: directive-class-suffix
class DateValueAccessor {
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.onChange = (_) => { };
        this.onTouched = () => { };
    }
    writeValue(value) {
        if (!value) {
            this.renderer.setProperty(this.elementRef.nativeElement, 'value', null);
            return;
        }
        this.renderer.setProperty(this.elementRef.nativeElement, 'valueAsDate', value);
    }
    registerOnChange(fn) { this.onChange = fn; }
    registerOnTouched(fn) { this.onTouched = fn; }
    setDisabledState(isDisabled) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
    }
}
DateValueAccessor.decorators = [
    { type: Directive, args: [{
                // this selector changes the previous behavior silently and might break existing code
                // selector: 'input[type=date][formControlName],input[type=date][formControl],input[type=date][ngModel]',
                // this selector is an opt-in version
                // tslint:disable-next-line: directive-selector
                selector: '[useValueAsDate]',
                providers: [DATE_VALUE_ACCESSOR]
            },] }
];
DateValueAccessor.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
DateValueAccessor.propDecorators = {
    onChange: [{ type: HostListener, args: ['input', ['$event.target.valueAsDate'],] }],
    onTouched: [{ type: HostListener, args: ['blur', [],] }]
};

class DateValueAccessorModule {
}
DateValueAccessorModule.decorators = [
    { type: NgModule, args: [{
                declarations: [DateValueAccessor],
                exports: [DateValueAccessor]
            },] }
];

const LOCAL_DATE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => LocalDateValueAccessor),
    multi: true
};
/**
 * The accessor for writing a value and listening to changes on a date input element
 *
 *  ### Example
 *  `<input type="date" name="myBirthday" ngModel useValueAsLocalDate>`
 */
// tslint:disable-next-line: directive-class-suffix
class LocalDateValueAccessor {
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.onChange = () => { };
        this.onInput = (date) => {
            let selectedDate = null;
            if (date) {
                // Create LOCAL Date, time is set to 00:00 in LOCAL time
                selectedDate = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
                ;
            }
            this.onChange(selectedDate);
        };
        this.onTouched = () => { };
    }
    writeValue(date) {
        // Create UTC Date, time is set to 00:00 in UTC time
        const utcDate = date ?
            new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())) :
            null;
        this.renderer.setProperty(this.elementRef.nativeElement, 'valueAsDate', utcDate);
    }
    registerOnChange(fn) { this.onChange = fn; }
    registerOnTouched(fn) { this.onTouched = fn; }
    setDisabledState(isDisabled) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
    }
}
LocalDateValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: '[useValueAsLocalDate]',
                providers: [LOCAL_DATE_VALUE_ACCESSOR]
            },] }
];
LocalDateValueAccessor.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
LocalDateValueAccessor.propDecorators = {
    onInput: [{ type: HostListener, args: ['input', ['$event.target.valueAsDate'],] }],
    onTouched: [{ type: HostListener, args: ['blur', [],] }]
};
// Use Local Dates with html input type date
// https://stackoverflow.com/questions/53032953/what-is-the-correct-way-to-set-and-get-htmlinputelement-valueasdate-using-local

class LocalDateValueAccessorModule {
}
LocalDateValueAccessorModule.decorators = [
    { type: NgModule, args: [{
                declarations: [LocalDateValueAccessor],
                exports: [LocalDateValueAccessor]
            },] }
];

/*
 * Public API Surface of date-value-accessor
 */

/**
 * Generated bundle index. Do not edit.
 */

export { DATE_VALUE_ACCESSOR, DateValueAccessor, DateValueAccessorModule, LOCAL_DATE_VALUE_ACCESSOR, LocalDateValueAccessor, LocalDateValueAccessorModule };
//# sourceMappingURL=angular-date-value-accessor.js.map
