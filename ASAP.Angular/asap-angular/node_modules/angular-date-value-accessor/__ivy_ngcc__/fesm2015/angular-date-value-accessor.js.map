{"version":3,"file":"angular-date-value-accessor.js","sources":["../../../projects/date-value-accessor/src/lib/date-value-accessor.ts","../../../projects/date-value-accessor/src/lib/date-value-accessor.module.ts","../../../projects/date-value-accessor/src/lib/local-date-value-accessor.ts","../../../projects/date-value-accessor/src/lib/local-date-value-accessor.module.ts","../../../projects/date-value-accessor/src/public-api.ts","../../../projects/date-value-accessor/src/angular-date-value-accessor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, ElementRef, HostListener, Renderer2, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const DATE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DateValueAccessor),\n  multi: true\n};\n\n/**\n * The accessor for writing a value and listening to changes on a date input element\n *\n *  ### Example\n *  `<input type=\"date\" name=\"myBirthday\" ngModel useValueAsDate>`\n */\n@Directive({\n  // this selector changes the previous behavior silently and might break existing code\n  // selector: 'input[type=date][formControlName],input[type=date][formControl],input[type=date][ngModel]',\n\n  // this selector is an opt-in version\n  // tslint:disable-next-line: directive-selector\n  selector: '[useValueAsDate]',\n  providers: [DATE_VALUE_ACCESSOR]\n})\n// tslint:disable-next-line: directive-class-suffix\nexport class DateValueAccessor implements ControlValueAccessor {\n\n  @HostListener('input', ['$event.target.valueAsDate']) onChange = (_: any) => { };\n  @HostListener('blur', []) onTouched = () => { };\n\n  constructor(private renderer: Renderer2, private elementRef: ElementRef) { }\n\n  writeValue(value: Date): void {\n    if (!value) {\n      this.renderer.setProperty(this.elementRef.nativeElement, 'value', null);\n      return;\n    }\n    this.renderer.setProperty(this.elementRef.nativeElement, 'valueAsDate', value);\n  }\n\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn; }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { DateValueAccessor } from './date-value-accessor';\n\n@NgModule({\n  declarations: [DateValueAccessor],\n  exports: [DateValueAccessor]\n})\nexport class DateValueAccessorModule { }\n","import { Directive, ElementRef, HostListener, Renderer2, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const LOCAL_DATE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => LocalDateValueAccessor),\n  multi: true\n};\n\n/**\n * The accessor for writing a value and listening to changes on a date input element\n *\n *  ### Example\n *  `<input type=\"date\" name=\"myBirthday\" ngModel useValueAsLocalDate>`\n */\n@Directive({\n  selector: '[useValueAsLocalDate]',\n  providers: [LOCAL_DATE_VALUE_ACCESSOR]\n})\n// tslint:disable-next-line: directive-class-suffix\nexport class LocalDateValueAccessor implements ControlValueAccessor {\n\n  onChange: any = () => {};\n\n  @HostListener('input', ['$event.target.valueAsDate']) onInput = (date: Date) => {\n    let selectedDate: Date | null = null;\n    if (date) {\n      // Create LOCAL Date, time is set to 00:00 in LOCAL time\n      selectedDate = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());;\n    }\n    this.onChange(selectedDate);\n  }\n  @HostListener('blur', []) onTouched = () => { };\n\n  constructor(private renderer: Renderer2, private elementRef: ElementRef) { }\n\n  writeValue(date: Date): void {\n    // Create UTC Date, time is set to 00:00 in UTC time\n    const utcDate: Date = date ?\n      new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())) :\n      null;\n    this.renderer.setProperty(this.elementRef.nativeElement, 'valueAsDate', utcDate);\n  }\n\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn; }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n\n// Use Local Dates with html input type date\n// https://stackoverflow.com/questions/53032953/what-is-the-correct-way-to-set-and-get-htmlinputelement-valueasdate-using-local\n","import { NgModule } from '@angular/core';\nimport { LocalDateValueAccessor } from './local-date-value-accessor';\n@NgModule({\n  declarations: [LocalDateValueAccessor],\n  exports: [LocalDateValueAccessor]\n})\nexport class LocalDateValueAccessorModule { }\n","/*\n * Public API Surface of date-value-accessor\n */\n\nexport * from './lib/date-value-accessor';\nexport * from './lib/date-value-accessor.module';\nexport * from './lib/local-date-value-accessor';\nexport * from './lib/local-date-value-accessor.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}