import { forwardRef, Directive, Renderer2, ElementRef, HostListener, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';

import * as ɵngcc0 from '@angular/core';
const DATE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => DateValueAccessor),
    multi: true
};
/**
 * The accessor for writing a value and listening to changes on a date input element
 *
 *  ### Example
 *  `<input type="date" name="myBirthday" ngModel useValueAsDate>`
 */
// tslint:disable-next-line: directive-class-suffix
class DateValueAccessor {
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.onChange = (_) => { };
        this.onTouched = () => { };
    }
    writeValue(value) {
        if (!value) {
            this.renderer.setProperty(this.elementRef.nativeElement, 'value', null);
            return;
        }
        this.renderer.setProperty(this.elementRef.nativeElement, 'valueAsDate', value);
    }
    registerOnChange(fn) { this.onChange = fn; }
    registerOnTouched(fn) { this.onTouched = fn; }
    setDisabledState(isDisabled) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
    }
}
DateValueAccessor.ɵfac = function DateValueAccessor_Factory(t) { return new (t || DateValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
DateValueAccessor.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DateValueAccessor, selectors: [["", "useValueAsDate", ""]], hostBindings: function DateValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("input", function DateValueAccessor_input_HostBindingHandler($event) { return ctx.onChange($event.target.valueAsDate); })("blur", function DateValueAccessor_blur_HostBindingHandler() { return ctx.onTouched(); });
    } }, features: [ɵngcc0.ɵɵProvidersFeature([DATE_VALUE_ACCESSOR])] });
DateValueAccessor.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
DateValueAccessor.propDecorators = {
    onChange: [{ type: HostListener, args: ['input', ['$event.target.valueAsDate'],] }],
    onTouched: [{ type: HostListener, args: ['blur', [],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateValueAccessor, [{
        type: Directive,
        args: [{
                // this selector changes the previous behavior silently and might break existing code
                // selector: 'input[type=date][formControlName],input[type=date][formControl],input[type=date][ngModel]',
                // this selector is an opt-in version
                // tslint:disable-next-line: directive-selector
                selector: '[useValueAsDate]',
                providers: [DATE_VALUE_ACCESSOR]
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { onChange: [{
            type: HostListener,
            args: ['input', ['$event.target.valueAsDate']]
        }], onTouched: [{
            type: HostListener,
            args: ['blur', []]
        }] }); })();

class DateValueAccessorModule {
}
DateValueAccessorModule.ɵfac = function DateValueAccessorModule_Factory(t) { return new (t || DateValueAccessorModule)(); };
DateValueAccessorModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DateValueAccessorModule });
DateValueAccessorModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateValueAccessorModule, [{
        type: NgModule,
        args: [{
                declarations: [DateValueAccessor],
                exports: [DateValueAccessor]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DateValueAccessorModule, { declarations: [DateValueAccessor], exports: [DateValueAccessor] }); })();

const LOCAL_DATE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => LocalDateValueAccessor),
    multi: true
};
/**
 * The accessor for writing a value and listening to changes on a date input element
 *
 *  ### Example
 *  `<input type="date" name="myBirthday" ngModel useValueAsLocalDate>`
 */
// tslint:disable-next-line: directive-class-suffix
class LocalDateValueAccessor {
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.onChange = () => { };
        this.onInput = (date) => {
            let selectedDate = null;
            if (date) {
                // Create LOCAL Date, time is set to 00:00 in LOCAL time
                selectedDate = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
                ;
            }
            this.onChange(selectedDate);
        };
        this.onTouched = () => { };
    }
    writeValue(date) {
        // Create UTC Date, time is set to 00:00 in UTC time
        const utcDate = date ?
            new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())) :
            null;
        this.renderer.setProperty(this.elementRef.nativeElement, 'valueAsDate', utcDate);
    }
    registerOnChange(fn) { this.onChange = fn; }
    registerOnTouched(fn) { this.onTouched = fn; }
    setDisabledState(isDisabled) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
    }
}
LocalDateValueAccessor.ɵfac = function LocalDateValueAccessor_Factory(t) { return new (t || LocalDateValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
LocalDateValueAccessor.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: LocalDateValueAccessor, selectors: [["", "useValueAsLocalDate", ""]], hostBindings: function LocalDateValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("input", function LocalDateValueAccessor_input_HostBindingHandler($event) { return ctx.onInput($event.target.valueAsDate); })("blur", function LocalDateValueAccessor_blur_HostBindingHandler() { return ctx.onTouched(); });
    } }, features: [ɵngcc0.ɵɵProvidersFeature([LOCAL_DATE_VALUE_ACCESSOR])] });
LocalDateValueAccessor.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
LocalDateValueAccessor.propDecorators = {
    onInput: [{ type: HostListener, args: ['input', ['$event.target.valueAsDate'],] }],
    onTouched: [{ type: HostListener, args: ['blur', [],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LocalDateValueAccessor, [{
        type: Directive,
        args: [{
                selector: '[useValueAsLocalDate]',
                providers: [LOCAL_DATE_VALUE_ACCESSOR]
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { onInput: [{
            type: HostListener,
            args: ['input', ['$event.target.valueAsDate']]
        }], onTouched: [{
            type: HostListener,
            args: ['blur', []]
        }] }); })();
// Use Local Dates with html input type date
// https://stackoverflow.com/questions/53032953/what-is-the-correct-way-to-set-and-get-htmlinputelement-valueasdate-using-local

class LocalDateValueAccessorModule {
}
LocalDateValueAccessorModule.ɵfac = function LocalDateValueAccessorModule_Factory(t) { return new (t || LocalDateValueAccessorModule)(); };
LocalDateValueAccessorModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: LocalDateValueAccessorModule });
LocalDateValueAccessorModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LocalDateValueAccessorModule, [{
        type: NgModule,
        args: [{
                declarations: [LocalDateValueAccessor],
                exports: [LocalDateValueAccessor]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LocalDateValueAccessorModule, { declarations: [LocalDateValueAccessor], exports: [LocalDateValueAccessor] }); })();

/*
 * Public API Surface of date-value-accessor
 */

/**
 * Generated bundle index. Do not edit.
 */

export { DATE_VALUE_ACCESSOR, DateValueAccessor, DateValueAccessorModule, LOCAL_DATE_VALUE_ACCESSOR, LocalDateValueAccessor, LocalDateValueAccessorModule };

//# sourceMappingURL=angular-date-value-accessor.js.map